<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="petcare.mapper.UserMapper">

    <select id="findByUserId" parameterType="string" resultType="petcare.dto.UserDTO">
        SELECT user_id AS userId, password, email, phone, name, role, provider, provider_id AS providerId, profile_image AS profileImage, created_at AS createdAt, updated_at AS updatedAt
        FROM user WHERE user_id = #{userId}
    </select>

    <select id="findByEmail" parameterType="string" resultType="petcare.dto.UserDTO">
        SELECT user_id AS userId, password, email, phone, name, role, provider, provider_id AS providerId, profile_image AS profileImage, created_at AS createdAt, updated_at AS updatedAt
        FROM user WHERE email = #{email}
    </select>

    <!-- userId와 provider로 사용자 조회 -->
    <select id="findByUserIdAndProvider" resultType="petcare.dto.UserDTO">
        SELECT user_id AS userId, password, email, phone, name, role, provider, provider_id AS providerId, profile_image AS profileImage, created_at AS createdAt, updated_at AS updatedAt
        FROM user WHERE user_id = #{userId} AND provider = #{provider}
    </select>

    <insert id="insertUser" parameterType="petcare.dto.UserDTO">
        INSERT INTO user (user_id, password, email, phone, name, role, created_at)
        VALUES (#{userId}, #{password}, #{email}, #{phone}, #{name}, #{role}, NOW())
    </insert>
    <!-- 소셜로그인 사용자 insert (모든 필드 포함) -->
    <insert id="insertSocialUser" parameterType="petcare.dto.UserDTO">
        INSERT INTO user (user_id, password, email, phone, name, role, provider, provider_id, profile_image, created_at)
        VALUES (#{userId}, NULL, #{email}, #{phone}, #{name}, #{role}, #{provider}, #{providerId}, #{profileImage}, NOW())
    </insert>
    
    <!-- 소셜로그인 정보 업데이트 -->
    <update id="updateUserSocialInfo" parameterType="petcare.dto.UserDTO">
        UPDATE user 
        SET provider = #{provider}, 
            provider_id = #{providerId}, 
            profile_image = #{profileImage}
        WHERE user_id = #{userId}
    </update>

    <!-- 소셜 ID로 사용자 조회 -->
    <select id="findByProviderAndProviderId" resultType="petcare.dto.UserDTO">
        SELECT user_id AS userId, password, email, phone, name, role, provider, provider_id AS providerId, profile_image AS profileImage, created_at AS createdAt, updated_at AS updatedAt
        FROM user WHERE provider = #{provider} AND provider_id = #{providerId}
    </select>

    <!-- 추가 정보 업데이트 (프로필 완성용) -->
    <update id="updateUserAdditionalInfo" parameterType="petcare.dto.UserDTO">
        UPDATE user 
        SET phone = #{phone}, 
            name = #{name}, 
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <select id="findByEmailAndProvider" resultType="petcare.dto.UserDTO">
        SELECT user_id AS userId, password, email, phone, name, role, provider, provider_id AS providerId, profile_image AS profileImage, created_at AS createdAt, updated_at AS updatedAt
        FROM user WHERE email = #{email} AND provider = #{provider}
    </select>

    <update id="updateUserPassword" parameterType="petcare.dto.UserDTO">
        UPDATE user
        SET password = #{password}, updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 목록 조회 -->
    <select id="getUserList" resultType="petcare.dto.UserDTO">
        SELECT user_id AS userId, 
               email, 
               phone, 
               name, 
               role, 
               provider, 
               created_at AS createdAt, 
               updated_at AS updatedAt
        FROM user
        ORDER BY created_at DESC
    </select>

    <!-- 사용자 권한 업데이트 -->
    <update id="updateUserRole" parameterType="petcare.dto.UserDTO">
        UPDATE user
        SET role = #{role},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>
    
</mapper>
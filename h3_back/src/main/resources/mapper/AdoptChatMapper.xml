<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="petcare.mapper.AdoptChatMapper">

    <!-- ============ 세션 관련 쿼리 ============ -->
    
    <!-- 새 세션 생성 -->
    <insert id="insertSession" parameterType="petcare.dto.AdoptChatSessionDTO">
        INSERT INTO adopt_chat_sessions (
            session_id, user_id, session_title, created_at, updated_at, expires_at, status
        ) VALUES (
            #{sessionId}, #{userId}, #{sessionTitle}, NOW(), NOW(), 
            DATE_ADD(NOW(), INTERVAL 30 DAY), #{status}
        )
    </insert>
    
    <!-- 사용자별 세션 목록 조회 (최신순) -->
    <select id="selectSessionsByUserId" parameterType="string" resultType="petcare.dto.AdoptChatSessionDTO">
        SELECT 
            session_id as sessionId,
            user_id as userId,
            session_title as sessionTitle,
            created_at as createdAt,
            updated_at as updatedAt,
            expires_at as expiresAt,
            status
        FROM adopt_chat_sessions 
        WHERE user_id = #{userId}
        ORDER BY updated_at DESC
    </select>
    
    <!-- 세션 ID로 세션 조회 -->
    <select id="selectSessionById" parameterType="string" resultType="petcare.dto.AdoptChatSessionDTO">
        SELECT 
            session_id as sessionId,
            user_id as userId,
            session_title as sessionTitle,
            created_at as createdAt,
            updated_at as updatedAt,
            expires_at as expiresAt,
            status
        FROM adopt_chat_sessions 
        WHERE session_id = #{sessionId}
    </select>
    
    <!-- 세션 상태 업데이트 -->
    <update id="updateSessionStatus">
        UPDATE adopt_chat_sessions 
        SET status = #{status}, updated_at = NOW() 
        WHERE session_id = #{sessionId}
    </update>
    
    <!-- 세션 제목 업데이트 -->
    <update id="updateSessionTitle">
        UPDATE adopt_chat_sessions 
        SET session_title = #{title}, updated_at = NOW() 
        WHERE session_id = #{sessionId}
    </update>
    
    <!-- 세션 updated_at 갱신 -->
    <update id="updateSessionTimestamp">
        UPDATE adopt_chat_sessions 
        SET updated_at = NOW() 
        WHERE session_id = #{sessionId}
    </update>
    
    <!-- 만료된 세션 삭제 (30일 정리용) -->
    <delete id="deleteExpiredSessions">
        DELETE FROM adopt_chat_sessions 
        WHERE expires_at &lt; NOW()
    </delete>
    
    <!-- ============ 메시지 관련 쿼리 ============ -->
    
    <!-- 새 메시지 저장 -->
    <insert id="insertMessage" parameterType="petcare.dto.AdoptChatMessageDTO" useGeneratedKeys="true" keyProperty="messageId">
        INSERT INTO adopt_chat_messages (
            session_id, message_type, content, pets_json, created_at, sequence
        ) VALUES (
            #{sessionId}, #{messageType}, #{content}, #{petsJson}, NOW(), #{sequence}
        )
    </insert>
    
    <!-- 세션의 모든 메시지 조회 (순서대로) -->
    <select id="selectMessagesBySessionId" parameterType="string" resultType="petcare.dto.AdoptChatMessageDTO">
        SELECT 
            message_id as messageId,
            session_id as sessionId,
            message_type as messageType,
            content,
            pets_json as petsJson,
            created_at as createdAt,
            sequence
        FROM adopt_chat_messages 
        WHERE session_id = #{sessionId}
        ORDER BY sequence ASC, created_at ASC
    </select>
    
    <!-- 세션의 메시지 개수 조회 -->
    <select id="countMessagesBySessionId" parameterType="string" resultType="int">
        SELECT COUNT(*) 
        FROM adopt_chat_messages 
        WHERE session_id = #{sessionId}
    </select>
    
    <!-- 세션의 다음 sequence 번호 조회 -->
    <select id="selectNextSequence" parameterType="string" resultType="int">
        SELECT COALESCE(MAX(sequence), 0) + 1 
        FROM adopt_chat_messages 
        WHERE session_id = #{sessionId}
    </select>
    
    <!-- 세션의 첫 번째 사용자 메시지 조회 (제목 생성용) -->
    <select id="selectFirstUserMessage" parameterType="string" resultType="petcare.dto.AdoptChatMessageDTO">
        SELECT 
            message_id as messageId,
            session_id as sessionId,
            message_type as messageType,
            content,
            pets_json as petsJson,
            created_at as createdAt,
            sequence
        FROM adopt_chat_messages 
        WHERE session_id = #{sessionId} AND message_type = 'USER'
        ORDER BY sequence ASC, created_at ASC
        LIMIT 1
    </select>

</mapper>

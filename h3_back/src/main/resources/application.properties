spring.application.name=petcare-sts

# Spring Boot 기본 .env 지원 사용
spring.config.import=optional:file:.env[.properties]

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://byhou.synology.me:3370/h3?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true

spring.datasource.username=h3
spring.datasource.password=Dbrlrus25^
server.port=8080

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect

mybatis.mapper-locations=classpath:mapper/*.xml
# MyBatis에서 null 값도 Map에 포함시키도록 설정
mybatis.configuration.call-setters-on-nulls=true

# CORS 설정
cors.allowed-origins=${CORS_ALLOWED_ORIGINS}
cors.allowed-origin-patterns=${CORS_ALLOWED_ORIGIN_PATTERNS}
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
cors.allowed-headers=*
cors.max-age=3600 

# 파일 업로드 설정
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=20MB
spring.servlet.multipart.enabled=true

# 파일서버 설정
supabase.storage.url=https://vqnpgyndoklgrzvgqntm.supabase.co
supabase.storage.secret-key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxbnBneW5kb2tsZ3J6dmdxbnRtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDUwNzUzNywiZXhwIjoyMDY2MDgzNTM3fQ.By99fmATDw0epw1BBqb17TsuuIRTheLL4P_7O-DVckg
supabase.storage.bucket=h3-pet-images
supabase.storage.folder-pet-images=pet_images/
supabase.storage.folder-chatbot-images=chatbot_images/

# Jackson DateTime 설정
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Asia/Seoul

# GEMINI API 기본 설정(key값 설정해서 사용)
gemini.api.key=AIzaSyB8IfPW-gH86vJdlergNx6lYaf_IDiPoHo
gemini.api.base-url=https://generativelanguage.googleapis.com/v1beta
gemini.api.model=gemini-2.0-flash
gemini.api.timeout=20000
gemini.api.max-tokens=8192
gemini.api.temperature=0.7

# 챗봇으로 업로드된 이미지 저장 경로
file.upload.base-path=C:/_hjproject/h3_back/chatimgupload/aivet
file.upload.max-size=10MB
file.upload.allowed-types=jpg,jpeg,png,webp

# OAuth2 소셜로그인 설정
# Google OAuth2 설정
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH_GOOGLE_REDIRECT_URI}

# Kakao OAuth2 설정
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.scope=account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri=${OAUTH_KAKAO_REDIRECT_URI}

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# Naver OAuth2 설정
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.scope=name,email
spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri=${OAUTH_NAVER_REDIRECT_URI}
# spring.security.oauth2.client.registration.naver.user-name-attribute=id
#붉은 줄 무시

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# JWT 설정
jwt.secret=ChangeThisToAReallyLongRandomSecretKey1234567890!@#$%^&*()
jwt.token-validity-in-seconds=3600

# 보호견 탐색 fast api 
fastapi.search.server=${FASTAPI_SEARCH_SERVER}

# AI 수의사 챗봇 fast api
fastapi.aivet.server=${FASTAPI_AIVET_SERVER}

# 입양 상담 챗봇 fast api
# 기존 서버
# fastapi.adopt.server=http://192.168.0.90:8000 
# 새서버
fastapi.adopt.server=${FASTAPI_ADOPT_SERVER}
# fastapi.adopt.server=http://localhost:8000

# 챗봇 AI 이미지 검색 fast api
fastapi.imgsearch.server=${FASTAPI_IMGSEARCH_SERVER}

# 보호견 대표이미지 선택 fast api
fastapi.best-image.server=${FASTAPI_BEST_IMAGE_SERVER}

# springframework로깅 설정
logging.level.org.springframework.security=DEBUG

# MyBatis 쿼리 로그 설정
logging.level.petcare.mapper=DEBUG
logging.level.java.sql.Statement=DEBUG
logging.level.java.sql.PreparedStatement=DEBUG

# 결과 출력 제외
logging.level.java.sql.ResultSet=OFF

### 서비스 적용 여부 설정
# [Admin] 보호견 등록시 이미지 벡터 생성 fast-api 사용 여부
service.on.image-vectorize=true
# [Admin] 보호견 등록시 대표이미지 선택 fast-api 사용 여부
service.on.best-image-select=true

server.address=0.0.0.0